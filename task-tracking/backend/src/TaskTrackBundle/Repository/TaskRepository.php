<?php

namespace TaskTrackBundle\Repository;

use TaskTrackBundle\Entity\Task;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUserTasks($user_id) {
        $tasks = $this->createQueryBuilder("t")
                ->select()
                ->where("t.user = :user_id")
                ->setParameter("user_id", $user_id)
                ->getQuery()
                ->getResult();
    }
    
    public function getUserTask($user_id, $challenge_id) {
        $task = $this->findOneBy(["user_id" => $user_id, "challenge_id" => $challenge_id]);

        return $task;
    }
    
    public function updateScore($task_id, $score) {
        $updated = $this->createQueryBuilder("t")
                ->update()
                ->set("t.score", $score)
                ->where("t.id = :task_id")
                ->setParameter("task_id", $task_id)
                ->getQuery()
                ->execute();
        return $updated;
    }
    
    public function updateDuration($task_id, $duration) {
        $updated = $this->createQueryBuilder("t")
                ->update()
                ->set("t.duration", $duration)
                ->where("t.id = :task_id")
                ->setParameter("task_id", $task_id)
                ->getQuery()
                ->execute();
        return $updated;
    }
    
    public function updateDone($task_id, $done) {
        $updated = $this->createQueryBuilder("t")
                ->update()
                ->set("t.done", $done)
                ->where("t.id = :task_id")
                ->setParameter("task_id", $task_id)
                ->getQuery()
                ->execute();
        return $updated;
    }
    
    public function addNewTask($supervisor, $user, $challenge, $score = 0, $seconds = 0, $done = false) {
        $em = $this->getEntityManager();
        $task = new Task;
        
        $task->setUser($user);
        $task->setSupervisor($supervisor);
        $task->setChallenge($challenge);
        $task->setScore($score);
        $task->setSeconds($seconds);
        $task->setDone($done);
        $task->setInProgress(false);
        
        $em->persist($task);
        $em->flush();
    }
    
    public function checkIfTaskExists($supervisor_id, $user_id, $challenge_id) {
        $task = $this->findOneBy(["user" => $user_id, "supervisor" => $supervisor_id, "challenge" => $challenge_id, "done" => false]);
        return $task;
    }
    
    public function getTasksByChallengeIds($user_id, $challenge_ids) {
        $qb = $this->createQueryBuilder("t");
        $qs = $qb->select()
                ->where($qb->expr()->in("t.challenge", $challenge_ids))
                ->where("t.user = :user_id")
                ->setParameter("user_id", $user_id)
                ->getQuery()
                ->getArrayResult();
        return $qs;
    }
    
    public function getTraineeUnfinishedTasks($user_id) {
        return $this->createQueryBuilder("t")
                ->select("t, c.title, c.duration")
                ->innerJoin("t.challenge", "c")
                ->where("t.user = :user_id")
                ->andWhere("t.done = :done")
                ->setParameter("done", false)
                ->setParameter("user_id", $user_id);
    }
    
    public function getTraineeUnfinishedTasksPaginated($supervisor_id, $user_id, $paginator, $page, $itemsPerPage, $count = false) {
        $tasks = $this->createQueryBuilder("t")
                ->select("t, c.title, c.duration")
                ->innerJoin("t.challenge", "c")
                ->where("t.user = :user_id")
                ->andWhere("t.done = :done")
                ->andWhere("t.supervisor = :supervisor_id")
                ->setParameter("done", false)
                ->setParameter("user_id", $user_id)
                ->setParameter("supervisor_id", $supervisor_id);
        if($count) {
            return $paginator->getCount($tasks);
        }
        return $paginator->getResult($tasks, $page, $itemsPerPage);
    }
    
    public function getTraineeUnfinishedTasksNonPaginated($user_id) {
        return $this->createQueryBuilder("t")
                ->select()
                ->where("t.user = :user_id")
                ->andWhere("t.done = :done")
                ->setParameter("done", false)
                ->setParameter("user_id", $user_id)
                ->getQuery()
                ->getResult();
    }
    
    public function getTraineeTasks($user_id) {
        $tasks = $this->createQueryBuilder("t")
                ->select()
                ->where("t.user = :user_id")
                ->setParameter("user_id", $user_id)
                ->getQuery()
                ->getArrayResult();
        return $tasks;
    }
    
    public function getFilteredTasks($filter, $paginator, $page, $itemsPerPage, $count = false) {
        
        $qb = $this
                ->createQueryBuilder("t")
                ->select("t.id, t.seconds, t.score, t.in_progress, t.done, c.title, c.duration, u.username")
                ->join("t.challenge", "c")
                ->join("t.supervisor", "u");
        
        $tasks = $filter->filter($qb);
        
        if($count) {
            $tasks = $paginator->getCount($tasks);
        }
        else {
            $tasks = $paginator->getResult($tasks, $page, $itemsPerPage);
        }
        return $tasks;
    }
    
    public function deleteTask($task_id) {
        $tasks = $this->createQueryBuilder("t")
                ->delete()
                ->where("t.id = :task_id")
                ->setParameter("task_id", $task_id)
                ->getQuery()
                ->getResult();
    
        return $tasks;
    }
    
    public function toggleTaskInProgress($task_id) {
        $em = $this->getEntityManager();
        $task = $this->find($task_id);
        $inProgress = $task->getInProgress();
        dump($inProgress);
        if($inProgress == true) {
            $startedAt = $task->getUpdatedAt();
            $now = new \DateTime;
            $task->setSeconds($task->getSeconds() + $now->getTimestamp() - $startedAt->getTimeStamp());
        }
        $task->setInProgress(! $task->getInProgress());
        $em->persist($task);
        $em->flush();
    }
   
}

