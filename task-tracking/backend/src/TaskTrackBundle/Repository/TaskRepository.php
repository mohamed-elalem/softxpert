<?php

namespace TaskTrackBundle\Repository;

use TaskTrackBundle\Entity\Task;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUserTask($user_id, $challenge_id) {
        $task = $this->findOneBy(["user_id" => $user_id, "challenge_id" => $challenge_id]);
        if(! $task) {
            throw new Exception("Task wasn't found");
        }
        
        return $task;
    }
    
    public function updateUserTaskScore($user_id, $challenge_id, $score) {
        $task = $this->findOneBy(["user_id" => $user_id, "challenge_id" => $challenge_id]);
        if(! $task) {
            throw new Exception("Task wasn't found");
        }
        
        $task->setScore($score);
        
        return $task;
    }
    
    public function updateUserTaskDuration($user_id, $challenge_id, $duration) {
        $task = $this->findOneBy(["user_id" => $user_id, "challenge_id" => $challenge_id]);
        
        if(! $task) {
            throw new Exception("Task wasn't found");
        }
        
        $task->setSeconds($task->getSeconds() + $duration);
        
        return $task;
    }
    
    public function updateUserTaskDone($user_id, $challenge_id, $done) {
        $task = $this->findOneBy(["user_id" => $user_id, "challenge_id", $challenge_id]);
        
        if(! $task) {
            throw new Exception("Task wasn't found");
        }
        
        $task->setDone($done);
        
        return $task;
    }
    
    public function addNewTask($supervisor, $user, $challenge, $score = 0, $seconds = 0, $done = false) {
        $em = $this->getEntityManager();
        $task = new Task;
        
        $task->setUser($user);
        $task->setSupervisor($supervisor);
        $task->setChallenge($challenge);
        $task->setScore($score);
        $task->setSeconds($seconds);
        $task->setDone($done);
        
        $em->persist($task);
        $em->flush();
    }
    
    public function checkIfTaskExists($supervisor_id, $user_id, $challenge_id) {
        $task = $this->findOneBy(["user" => $user_id, "supervisor" => $supervisor_id, "challenge" => $challenge_id, "done" => false]);
        return $task;
    }
    
    public function getTasksByChallengeIds($user_id, $challenge_ids) {
        $qb = $this->createQueryBuilder("t");
        $qs = $qb->select()
                ->where($qb->expr()->in("t.challenge", $challenge_ids))
                ->where("t.user = :user_id")
                ->setParameter("user_id", $user_id)
                ->getQuery()
                ->getArrayResult();
        return $qs;
    }
    
    public function getTraineeUnfinishedTasks($user_id) {
        $tasks = $this->createQueryBuilder("t")
                ->select()
                ->where("t.user = :user_id and t.done = false")
                ->setParameter("user_id", $user_id)
                ->getQuery()
                ->getArrayResult();
        return $tasks; 
    }
    
    public function getTraineeTasks($user_id) {
        $tasks = $this->createQueryBuilder("t")
                ->select()
                ->where("t.user = :user_id")
                ->setParameter("user_id", $user_id)
                ->getQuery()
                ->getResult();
        return $tasks;
    }
    
    public function getFilteredTasks($filter, $paginator, $page, $itemsPerPage, $count = false) {
        
        $qb = $this->createQueryBuilder("t")->select();
        $tasks = $filter->filter($qb);
        if($count) {
            $tasks = $paginator->getPages($tasks, $itemsPerPage);
        }
        else {
            $tasks = $paginator->getResult($tasks, $page, $itemsPerPage);
        }
        return $tasks;
    }
}

