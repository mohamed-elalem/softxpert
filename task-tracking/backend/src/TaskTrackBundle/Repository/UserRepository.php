<?php

namespace TaskTrackBundle\Repository;

use TaskTrackBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function checkIfRegistered($username, $email) {
        $user = $this->createQueryBuilder('u')
                ->where("u.username = :username")
                ->orWhere("u.email = :email")
                ->setParameters([
                    "email" => $email,
                    "username" => $username
                ])->getQuery()->getResult();
        return $user;
    }
    
    public function addNewUser($name, $username, $email, $password, $role) {
        $em = $this->getEntityManager();
        $user = new User();
        $user->setUsername($username)
                ->setName($name)
                ->setRole($role)
                ->setPassword($password)
                ->setEmail($email);
        $em->persist($user);
        $em->flush();
    }
    
    public function deleteUser($id) {
        $user = $this->findOneById($id);
        $em = $this->getEntityManager();
        $em->remove($user);
        $em->flush();
    }
    
    public function updateUser($user, $data) {
        $q = $this->createQueryBuilder("u")->update();

        foreach($data as $key => $value) {
            $q = $q->set($key, $value);
        }
        
        $q->where(["id" => ":id"])->setParameter("id", $user->getId())->getQuery()->execute();
    }
    
    public function getAllUsers() {
        $users = $this->createQueryBuilder("q")->select()->getQuery()->getResult();
        
        return $users;
    }
    
    public function selectUsersByRole($role) {
        $users = $this->selectQueryBuilder("q")
                ->select()
                ->where("u.role = :role")
                ->setParameter("role", $role)
                ->getQuery()->getResult();
        return $users;
    }
    
    public function getUser($id) {
        
        $user = $this->findOneById($id);
        
        if(! $user) {
            throw new Exception("User " . $id . " wasn't found");
        }
        return $user;
    }
    
    public function getUserChallenges($id) {
        $user = $this->findOneBy($id);
        
        if(! $user) {
            throw new Exception("User " . $id . " wasn't found");
        }
        
        return $user->getChallenges();
    }
    
    public function getUserTasks($id) {
        $user = $this->findByOne($id);
        
        if(! $user) {
            throw new Exception("User " . $id . " wasn't found");
        }
        
        return $user->getTasks();
    }
    
    public function getAllUsersByRole($role) {
        $users = $this->createQueryBuilder("u")
                ->where("u.role = :role")
                ->setParameter("role", $role)
                ->getQuery()
                ->getResult();
        return $users;
    }
}
